<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="dir.props" />
  <Import Project="BuildValues.props" />

  <ItemGroup>
    <Project Include="Framework\Microsoft.Build.Framework.csproj" />
    <Project Include="Utilities\Microsoft.Build.Utilities.csproj" />
    <Project Include="XMakeBuildEngine\Microsoft.Build.csproj" />
    <Project Include="XMakeCommandLine\MSBuild.csproj" />
    <Project Include="XMakeCommandLine\MSBuildTaskHost\MSBuildTaskHost.csproj"
             Condition="'$(FullFrameworkBuild)' == 'true'" />
    <Project Include="XMakeTasks\Microsoft.Build.Tasks.csproj" />
    <Project Include="OrcasEngine\OrcasEngine.csproj" Condition="$(FullFrameworkBuild) == 'true'" />
    <Project Include="XMakeConversion\XMakeConversion.csproj" Condition="$(FullFrameworkBuild) == 'true'" />

    <Project Include="Framework\UnitTests\Microsoft.Build.Framework.UnitTests.csproj" />
    <Project Include="XMakeCommandLine\UnitTests\Microsoft.Build.CommandLine.UnitTests.csproj" />
    <Project Include="Utilities\UnitTests\Microsoft.Build.Utilities.UnitTests.csproj" />
    <Project Include="XMakeTasks\UnitTests\Microsoft.Build.Tasks.UnitTests.csproj" />
    <Project Include="XMakeBuildEngine\UnitTests\Microsoft.Build.Engine.UnitTests.csproj" />
    <Project Include="XMakeBuildEngine\UnitTestsPublicOM\Microsoft.Build.Engine.OM.UnitTests.csproj" />
  </ItemGroup>

  <Import Project="dir.targets" />

  <Import Project="..\dir.traversal.targets" />

  <Import Project="$(ToolsDir)UpdateBuildValues.targets" Condition="Exists('$(ToolsDir)UpdateBuildValues.targets')" />
  <Import Project="$(ToolsDir)CommitBuildValues.targets" Condition="Exists('$(ToolsDir)CommitBuildValues.targets')" />

  <Import Project="$(ToolsDir)BuildVersion.targets" Condition="Exists('$(ToolsDir)BuildVersion.targets')" />
  <Import Project="$(ToolsDir)versioning.targets" Condition="Exists('$(ToolsDir)versioning.targets')" />

  <PropertyGroup>
    <SkipVersionGeneration>true</SkipVersionGeneration>
    <BaseVersion>0.1.0-preview</BaseVersion>
    <BuildNumberMajor>$(RevisionNumber)</BuildNumberMajor>
    <BuildNumberMinor>$([System.DateTime]::Now.ToString(`yMMdd`))</BuildNumberMinor>

    <!-- The version for msbuild nuget packages. Used by packages.targets:AddNuGetPackageVersionMetadataToNuspecs -->
    <PackageVersion>$(BaseVersion)-$(BuildNumberMajor)-$(BuildNumberMinor)</PackageVersion>

    <!-- Turn off the automated package generation in packages.targets:AddNuGetPackageVersionMetadataToNuspecs and use the above PackageVersion-->
    <DoNotGeneratePackageVersion>true</DoNotGeneratePackageVersion>
  </PropertyGroup>

  <ItemGroup>
    <!-- Used by packages.targets:BuildPackages to inject properties into the nuspec-->
    <NuspecProperties Include="version=$(PackageVersion)"/>
  </ItemGroup>

  <Import Project="$(ToolsDir)packages.targets" Condition="Exists('$(ToolsDir)packages.targets') and '$(ImportGetNuGetPackageVersions)' != 'false'" />

  <PropertyGroup Condition="Exists('$(ToolsDir)packages.targets') and '$(ImportGetNuGetPackageVersions)' != 'false'">
    <TraversalBuildDependsOn>
      $(TraversalBuildDependsOn);
      BuildPackages;
    </TraversalBuildDependsOn>
  </PropertyGroup>

  <!-- Workaround to remove items from PackagesNuSpecFiles (defined in packages.targets). This ItemGroup
       is defined with a wildcard Include and no way to override. -->
  <Target Name="RemovePackages" BeforeTargets="BuildPackages" Condition="$(FullFrameworkBuild) != 'true'" >
    <ItemGroup>
        <PackagesNuSpecFiles Remove="$(SourceDir)nuget\Microsoft.Build.Engine.nuspec;$(SourceDir)nuget\Microsoft.Build.Conversion.Core.nuspec" />
    </ItemGroup>
  </Target>

</Project>
